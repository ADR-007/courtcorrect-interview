[tool.poetry]
name = "courtcorrect-interview"
version = "0.1.0"
description = ""
authors = ["Adrian Dankiv <adr.7777777@gmail.com"]
readme = "README.md"

[tool.poetry.dependencies]
python = "~3.11"
fastapi = "^0.103.2"
pyyaml = "^6.0.1"
uvicorn = "^0.23.2"
pydantic-settings = "^2.0.3"
furl = "^2.1.3"
sqlalchemy = { version = "^2.0.23", extras = ["asyncio"] }
alembic = "^1.12.1"
asyncpg = "^0.28.0"
gunicorn = "^21.2.0"
fastapi-filter = "^1.1.0"
fastapi-pagination = "^0.12.14"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
factory-boy = "^3.3.0"
mypy = "^1.5.1"
isort = "^5.12.0"
ruff = "^0.1.3"
pyproject-autoflake = "^1.0.2"
Flake8-pyproject = "^1.2.3"
coverage = "^7.3.2"
pytest-mock = "^3.11.1"
types-python-dateutil = "^2.8.19.14"
types-factory-boy = "^0.4.1"
httpx = "^0.25.0"
async-factory-boy = "^1.0.1"
polyfactory = "^2.9.0"
typer = "^0.9.0"
inflection = "^0.5.1"
freezegun = "^1.2.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
python_files = ['test_*.py', 'tests.py']

[tool.ruff]
select = [
    "F", # Pyflakes
    "W", "E", # pycodestyle (E
    "C90", # mccabe
    "I", # isort
    "N", # pep8-naming
    "D", # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "ASYNC", # flake8-async
    "S", # flake8-bandit
    "BLE", # flake8-blind-except
    #    "FBT", # flake8-boolean-trap
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    #    "CPY", # flake8-copyright
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    #    "DJ", # flake8-django
    #    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    #    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    #    "G", # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    #    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    #    "TD", # flake8-todos
    #    "FIX", # flake8-fixme
    "ERA", # eradicate
    #    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    #    "NPY", # NumPy-specific rules
    #    "AIR", # Airflow
    "PERF", # Perflint
    #    "FURB", # refurb (in preview)
    #    "LOG", # flake8-logging (in preview)
    "RUF", # Ruff-specific rules
]
line-length = 79
extend-exclude = ['tmp/*']
ignore = [
    # Ignore missing documentation (D100-D107):
    'D100', 'D101', 'D102', 'D103', 'D104', 'D105', 'D106', 'D107',
    'ANN101', 'ANN102', 'ANN401',
    'S101', 'B008', 'PTH123', 'PLR0913', 'TRY003',
    'RUF012', # Doesn't support pydantic v2 yet
    'C408', # Unnecessary dict call - rewrite as a literal
    'RET504', # Unnecessary assignment before `return` statement
    'TCH002', 'TCH003', #  Move third-party import "{}" into a type-checking block
    'PERF401', # Use a list comprehension to create a transformed list
]
unfixable = [
    "ERA001", # Commented code
]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.ruff.per-file-ignores]
"**/test[_s]*.py" = ['S105', 'S106', 'ARG001', 'PLR2004', 'PLR0915', 'TRY002', 'S311']
"**/fixtures.py" = ['ARG001']
"testtools.py" = ['B904', 'TRY200', 'PLR2004', 'S311']
"app/*/factories.py" = ['S311']
"conftest.py" = ['ARG001']
"scripts/*.py" = ['INP001', 'T201']
"alembic/env.py" = ['INP001']
"alembic/versions/*" = ['INP001']
"__init__.py" = ['F401', 'F403']

[tool.ruff.flake8-builtins]
builtins-ignorelist = ["id", "type"]

[tool.flake8]
ignore = ['F821', 'W503']
per-file-ignores = [
    '__init__.py:F401,F403',
    'test*.py:F841',
]
max-line-length = 120

[tool.mypy]
plugins = [
    "pydantic.mypy"
]

[[tool.mypy.overrides]]
module = "app.*.factories"
ignore_errors = true

[[tool.mypy.overrides]]
module = "async_factory_boy.factory.sqlalchemy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "furl.*"
ignore_missing_imports = true

[tool.coverage.run]
concurrency = ["greenlet"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]
