import { useQuery, useMutation, UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ValidationError } from "../requests/models/ValidationError";
import { RegulatorySchema } from "../requests/models/RegulatorySchema";
import { Page_RegulatorySchema_ } from "../requests/models/Page_RegulatorySchema_";
import { NamedModelSchema } from "../requests/models/NamedModelSchema";
import { ListResponse_NamedModelSchema_ } from "../requests/models/ListResponse_NamedModelSchema_";
import { HTTPValidationError } from "../requests/models/HTTPValidationError";
import { StatusService } from "../requests/services/StatusService";
import { RegulationsService } from "../requests/services/RegulationsService";
import { DecisionsService } from "../requests/services/DecisionsService";
import { CompaniesService } from "../requests/services/CompaniesService";
import { CategoriesService } from "../requests/services/CategoriesService";
export const useStatusServiceStatusKey = "StatusServiceStatus";
export const useStatusServiceStatus = <TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<Awaited<ReturnType<typeof StatusService.status>>, unknown, Awaited<ReturnType<typeof StatusService.status>>, unknown[]>, "queryKey" | "queryFn" | "initialData">) => useQuery([useStatusServiceStatusKey, ...(queryKey ?? [])], () => StatusService.status(), options);
export const useRegulationsServiceGetRegulationsKey = "RegulationsServiceGetRegulations";
export const useRegulationsServiceGetRegulations = <TQueryKey extends Array<unknown> = unknown[]>({ orderBy, search, categoryId, companyId, decisionId, publishDate, page, size }: {
    orderBy?: (string | null);
    search?: (string | null);
    categoryId?: (number | null);
    companyId?: (number | null);
    decisionId?: (number | null);
    publishDate?: (string | null);
    page?: number;
    size?: number;
}, queryKey?: TQueryKey, options?: Omit<UseQueryOptions<Awaited<ReturnType<typeof RegulationsService.getRegulations>>, unknown, Awaited<ReturnType<typeof RegulationsService.getRegulations>>, unknown[]>, "queryKey" | "queryFn" | "initialData">) => useQuery([useRegulationsServiceGetRegulationsKey, ...(queryKey ?? [{ orderBy, search, categoryId, companyId, decisionId, publishDate, page, size }])], () => RegulationsService.getRegulations(orderBy, search, categoryId, companyId, decisionId, publishDate, page, size), options);
export const useDecisionsServiceGetDecisionsKey = "DecisionsServiceGetDecisions";
export const useDecisionsServiceGetDecisions = <TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<Awaited<ReturnType<typeof DecisionsService.getDecisions>>, unknown, Awaited<ReturnType<typeof DecisionsService.getDecisions>>, unknown[]>, "queryKey" | "queryFn" | "initialData">) => useQuery([useDecisionsServiceGetDecisionsKey, ...(queryKey ?? [])], () => DecisionsService.getDecisions(), options);
export const useCompaniesServiceGetCompaniesKey = "CompaniesServiceGetCompanies";
export const useCompaniesServiceGetCompanies = <TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<Awaited<ReturnType<typeof CompaniesService.getCompanies>>, unknown, Awaited<ReturnType<typeof CompaniesService.getCompanies>>, unknown[]>, "queryKey" | "queryFn" | "initialData">) => useQuery([useCompaniesServiceGetCompaniesKey, ...(queryKey ?? [])], () => CompaniesService.getCompanies(), options);
export const useCategoriesServiceGetCategoriesKey = "CategoriesServiceGetCategories";
export const useCategoriesServiceGetCategories = <TQueryKey extends Array<unknown> = unknown[]>(queryKey?: TQueryKey, options?: Omit<UseQueryOptions<Awaited<ReturnType<typeof CategoriesService.getCategories>>, unknown, Awaited<ReturnType<typeof CategoriesService.getCategories>>, unknown[]>, "queryKey" | "queryFn" | "initialData">) => useQuery([useCategoriesServiceGetCategoriesKey, ...(queryKey ?? [])], () => CategoriesService.getCategories(), options);
